version: 2.1

commands:
  destroy-environment:
    description: Delete cloudformation.
    parameters:
      workflow-id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.workflow-id >> --region us-east-1

  clear-s3:
    description: Clear S3.
    parameters:
      workflow-id:
        type: string   
    steps:
      - run:
          name: Clear S3
          when: on_fail
          command: |
            aws s3 rm s3://<< parameters.workflow-id >> --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow-id:
        type: string       
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/4TwwLXxZXa6Ft71Nw7gALr/migration_<< parameters.workflow-id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  inittial-infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update
          command: |
            yum -y update
      - run:
          name: Initial infrastructure
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/initial-infra.yml \
              --tags project=micro-udapeople \
              --stack-name "micro-udapeople-initial-infra-${CIRCLE_WORKFLOW_ID}" \
              --region us-east-1
      - destroy-environment:
          workflow-id: micro-udapeople-initial-infra-${CIRCLE_WORKFLOW_ID}

  inittial-cloudfront:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update
          command: |
            yum -y update
      - run:
          name: Create cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialCloudfront \
              --parameter-overrides OldWorkflowID="None" NewWorkflowID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=micro-udapeople --region us-east-1
      - destroy-environment:
          workflow-id: InitialCloudfront
      - destroy-environment:
          workflow-id: micro-udapeople-initial-infra-${CIRCLE_WORKFLOW_ID}

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build Front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build Back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze Front-end
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze Back-end
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --force
            npm audit --audit-level=critical

  create-backend-image:
    docker:
      - image: cimg/go:1.17
        auth:
          username: einton
          password: $DOCKER_PASSWORD 
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Compress Data
          command: |
            tar -C backend -czvf artifact.tar.gz .
            ls -l artifact.tar.gz
      - run:
          name: Build and upload Docker image
          command: |
            docker login -u einton --password ${DOCKER_PASSWORD}
            docker build --tag=micro-udapeople --build-arg TYPEORM_CONNECTION=${TYPEORM_CONNECTION} \
                  --build-arg TYPEORM_DATABASE=${TYPEORM_DATABASE} \
                  --build-arg TYPEORM_ENTITIES=${TYPEORM_ENTITIES} \
                  --build-arg TYPEORM_HOST=${TYPEORM_HOST} \
                  --build-arg TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} \
                  --build-arg TYPEORM_PASSWORD=${TYPEORM_PASSWORD} \
                  --build-arg TYPEORM_PORT=${TYPEORM_PORT} \
                  --build-arg TYPEORM_USERNAME=${TYPEORM_USERNAME} .
            docker image tag micro-udapeople:latest einton/micro-udapeople:latest
            docker push einton/micro-udapeople

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            sudo update-ca-certificates
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/4TwwLXxZXa6Ft71Nw7gALr/migration_${CIRCLE_WORKFLOW_ID}  -d '1'
            fi

  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependences
          command: |
            yum -y update
            yum -y install jq tar gzip
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
            echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: Update cluster profile
          command: |
            aws eks --region us-east-1 update-kubeconfig --name Micro-Udapeople-Cluster
      - run:
          name: Create deployment and service
          command: |
            kubectl apply -f deployment.yml
            kubectl apply -f service.yml
      - run:
          name: Get backend endpoint
          command: |
            sleep 120s
            export BACKEND_ENDPOINT=$(kubectl get service micro-udapeple -o json | jq -r '.status.loadBalancer.ingress[].hostname')
            export API_URL="http://${BACKEND_ENDPOINT}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_ENDPOINT}:3030" >> /tmp/.env
            cat /tmp/.env
      - persist_to_workspace:
          root: /tmp/
          paths:
            - .env
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID}

  smoke-test-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependences
          command: |
            yum -y update
            yum -y install tar gzip
      - attach_workspace:
          at: /tmp/
      - run:
          name: Smoke test.
          command: |
            export API_URL=$(sed -r 's/^[_0-9a-zA-Z]+=//g' /tmp/.env)
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Install kubectl
          when: on_fail
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
            echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: Destroy deployment and service
          when: on_fail
          command: |
            aws eks --region us-east-1 update-kubeconfig --name Micro-Udapeople-Cluster
            kubectl delete -f deployment.yml
            kubectl delete -f service.yml
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID}

  create-frontend-bucket:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=micro-udapeople \
              --stack-name "micro-udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" --region us-east-1
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow-id: micro-udapeople-frontend-${CIRCLE_WORKFLOW_ID}

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            cp /tmp/.env frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://micro-udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow-id: micro-udapeople-frontend-${CIRCLE_WORKFLOW_ID}

  smoke-test-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependences
          command: |
            yum -y update
            yum -y install tar gzip
      - attach_workspace:
          at: /tmp/
      - run:
          name: Smoke test.
          command: |
            URL="http://micro-udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID}
      - clear-s3:
          workflow-id: micro-udapeople-${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow-id: micro-udapeople-frontend-${CIRCLE_WORKFLOW_ID}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`NewWorkflowID\`].Value" \
                    --no-paginate --output text)
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialCloudfront \
              --parameter-overrides OldWorkflowID="${OldWorkflowID}" NewWorkflowID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=micro-udapeople
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID}
      - clear-s3:
          workflow-id: micro-udapeople-${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow-id: micro-udapeople-frontend-${CIRCLE_WORKFLOW_ID}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`OldWorkflowID\`].Value" \
                    --no-paginate --output text)
            export NewWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`NewWorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo NewWorkflowID: "${NewWorkflowID}"
            if [ ! -z "${OldWorkflowID}" ] && [ "${CIRCLE_WORKFLOW_ID}" == "${NewWorkflowID}" ];
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "micro-udapeople-frontend-${OldWorkflowID}"
            fi

  test-command:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            sed -i 's/micro-udapeople-app/micro-udapeople-app-1/g' service.yml
            cat service.yml

workflows:
  default:
    jobs:
      - inittial-infra:
          filters:
            branches:
              only: [init-project]
      - inittial-cloudfront:
          requires: [inittial-infra]
      - test-command
      # - build-frontend:
      #     filters:
      #       branches:
      #         only: [main]
      # - build-backend:
      #     filters:
      #       branches:
      #         only: [main]
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - create-backend-image: 
      #     requires: [test-backend, scan-backend, test-frontend, scan-frontend]
      # - run-migrations: 
      #     requires: [create-backend-image]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test-backend: 
      #     requires: [deploy-backend]
      # - create-frontend-bucket:
      #     requires: [smoke-test-backend]
      # - deploy-frontend: 
      #     requires: [create-frontend-bucket]
      # - smoke-test-frontend: 
      #     requires: [deploy-frontend]
      # - cloudfront-update: 
      #     requires: [smoke-test-frontend]
      # - cleanup:
      #     requires: [cloudfront-update]